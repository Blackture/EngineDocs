### YamlMime:ManagedReference
items:
- uid: Engine.Core.Physics.CollisionDetection.Grid
  commentId: T:Engine.Core.Physics.CollisionDetection.Grid
  id: Grid
  parent: Engine.Core.Physics.CollisionDetection
  children:
  - Engine.Core.Physics.CollisionDetection.Grid.#ctor
  - Engine.Core.Physics.CollisionDetection.Grid.AddMeshToCell(Vector2,Mesh3D)
  - Engine.Core.Physics.CollisionDetection.Grid.CellContains(Vector2,Mesh3D)
  - Engine.Core.Physics.CollisionDetection.Grid.Contains(Vector2)
  - Engine.Core.Physics.CollisionDetection.Grid.GetCell(Vector2)
  - Engine.Core.Physics.CollisionDetection.Grid.GetMeshesInCell(Vector2)
  - Engine.Core.Physics.CollisionDetection.Grid.GetMeshesInCells(Vector2[])
  - Engine.Core.Physics.CollisionDetection.Grid.Item(Vector2)
  - Engine.Core.Physics.CollisionDetection.Grid.RemoveMeshFromAllCells(Mesh3D)
  - Engine.Core.Physics.CollisionDetection.Grid.RemoveMeshFromCell(Vector2,Mesh3D)
  - Engine.Core.Physics.CollisionDetection.Grid.SetCell(Vector2,Engine.Core.Physics.CollisionDetection.Cell)
  langs:
  - csharp
  - vb
  name: Grid
  nameWithType: Grid
  fullName: Engine.Core.Physics.CollisionDetection.Grid
  type: Class
  source:
    id: Grid
    path: ''
    startLine: 6305
  assemblies:
  - cs.temp.dll
  namespace: Engine.Core.Physics.CollisionDetection
  syntax:
    content: public class Grid
    content.vb: Public Class Grid
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Engine.Core.Physics.CollisionDetection.Grid.Item(Vector2)
  commentId: P:Engine.Core.Physics.CollisionDetection.Grid.Item(Vector2)
  id: Item(Vector2)
  parent: Engine.Core.Physics.CollisionDetection.Grid
  langs:
  - csharp
  - vb
  name: Item[Vector2]
  nameWithType: Grid.Item[Vector2]
  fullName: Engine.Core.Physics.CollisionDetection.Grid.Item[Vector2]
  type: Property
  source:
    id: this[]
    path: ''
    startLine: 6309
  assemblies:
  - cs.temp.dll
  namespace: Engine.Core.Physics.CollisionDetection
  syntax:
    content: public Cell this[Vector2 index] { get; set; }
    parameters:
    - id: index
      type: Vector2
    return:
      type: Engine.Core.Physics.CollisionDetection.Cell
    content.vb: Public Property Item(index As Vector2) As Cell
  overload: Engine.Core.Physics.CollisionDetection.Grid.Item*
  nameWithType.vb: Grid.Item(Vector2)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Engine.Core.Physics.CollisionDetection.Grid.Item(Vector2)
  name.vb: Item(Vector2)
- uid: Engine.Core.Physics.CollisionDetection.Grid.#ctor
  commentId: M:Engine.Core.Physics.CollisionDetection.Grid.#ctor
  id: '#ctor'
  parent: Engine.Core.Physics.CollisionDetection.Grid
  langs:
  - csharp
  - vb
  name: Grid()
  nameWithType: Grid.Grid()
  fullName: Engine.Core.Physics.CollisionDetection.Grid.Grid()
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 6315
  assemblies:
  - cs.temp.dll
  namespace: Engine.Core.Physics.CollisionDetection
  syntax:
    content: public Grid()
    content.vb: Public Sub New
  overload: Engine.Core.Physics.CollisionDetection.Grid.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Engine.Core.Physics.CollisionDetection.Grid.GetCell(Vector2)
  commentId: M:Engine.Core.Physics.CollisionDetection.Grid.GetCell(Vector2)
  id: GetCell(Vector2)
  parent: Engine.Core.Physics.CollisionDetection.Grid
  langs:
  - csharp
  - vb
  name: GetCell(Vector2)
  nameWithType: Grid.GetCell(Vector2)
  fullName: Engine.Core.Physics.CollisionDetection.Grid.GetCell(Vector2)
  type: Method
  source:
    id: GetCell
    path: ''
    startLine: 6320
  assemblies:
  - cs.temp.dll
  namespace: Engine.Core.Physics.CollisionDetection
  syntax:
    content: public Cell GetCell(Vector2 index)
    parameters:
    - id: index
      type: Vector2
    return:
      type: Engine.Core.Physics.CollisionDetection.Cell
    content.vb: Public Function GetCell(index As Vector2) As Cell
  overload: Engine.Core.Physics.CollisionDetection.Grid.GetCell*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Engine.Core.Physics.CollisionDetection.Grid.SetCell(Vector2,Engine.Core.Physics.CollisionDetection.Cell)
  commentId: M:Engine.Core.Physics.CollisionDetection.Grid.SetCell(Vector2,Engine.Core.Physics.CollisionDetection.Cell)
  id: SetCell(Vector2,Engine.Core.Physics.CollisionDetection.Cell)
  parent: Engine.Core.Physics.CollisionDetection.Grid
  langs:
  - csharp
  - vb
  name: SetCell(Vector2, Cell)
  nameWithType: Grid.SetCell(Vector2, Cell)
  fullName: Engine.Core.Physics.CollisionDetection.Grid.SetCell(Vector2, Engine.Core.Physics.CollisionDetection.Cell)
  type: Method
  source:
    id: SetCell
    path: ''
    startLine: 6332
  assemblies:
  - cs.temp.dll
  namespace: Engine.Core.Physics.CollisionDetection
  syntax:
    content: public Cell SetCell(Vector2 index, Cell value)
    parameters:
    - id: index
      type: Vector2
    - id: value
      type: Engine.Core.Physics.CollisionDetection.Cell
    return:
      type: Engine.Core.Physics.CollisionDetection.Cell
    content.vb: Public Function SetCell(index As Vector2, value As Cell) As Cell
  overload: Engine.Core.Physics.CollisionDetection.Grid.SetCell*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Engine.Core.Physics.CollisionDetection.Grid.GetMeshesInCell(Vector2)
  commentId: M:Engine.Core.Physics.CollisionDetection.Grid.GetMeshesInCell(Vector2)
  id: GetMeshesInCell(Vector2)
  parent: Engine.Core.Physics.CollisionDetection.Grid
  langs:
  - csharp
  - vb
  name: GetMeshesInCell(Vector2)
  nameWithType: Grid.GetMeshesInCell(Vector2)
  fullName: Engine.Core.Physics.CollisionDetection.Grid.GetMeshesInCell(Vector2)
  type: Method
  source:
    id: GetMeshesInCell
    path: ''
    startLine: 6350
  assemblies:
  - cs.temp.dll
  namespace: Engine.Core.Physics.CollisionDetection
  syntax:
    content: public List<Mesh3D> GetMeshesInCell(Vector2 index)
    parameters:
    - id: index
      type: Vector2
    return:
      type: System.Collections.Generic.List{Mesh3D}
    content.vb: Public Function GetMeshesInCell(index As Vector2) As List(Of Mesh3D)
  overload: Engine.Core.Physics.CollisionDetection.Grid.GetMeshesInCell*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Engine.Core.Physics.CollisionDetection.Grid.GetMeshesInCells(Vector2[])
  commentId: M:Engine.Core.Physics.CollisionDetection.Grid.GetMeshesInCells(Vector2[])
  id: GetMeshesInCells(Vector2[])
  parent: Engine.Core.Physics.CollisionDetection.Grid
  langs:
  - csharp
  - vb
  name: GetMeshesInCells(Vector2[])
  nameWithType: Grid.GetMeshesInCells(Vector2[])
  fullName: Engine.Core.Physics.CollisionDetection.Grid.GetMeshesInCells(Vector2[])
  type: Method
  source:
    id: GetMeshesInCells
    path: ''
    startLine: 6355
  assemblies:
  - cs.temp.dll
  namespace: Engine.Core.Physics.CollisionDetection
  syntax:
    content: public List<Mesh3D> GetMeshesInCells(params Vector2[] indexes)
    parameters:
    - id: indexes
      type: Vector2[]
    return:
      type: System.Collections.Generic.List{Mesh3D}
    content.vb: Public Function GetMeshesInCells(ParamArray indexes As Vector2()) As List(Of Mesh3D)
  overload: Engine.Core.Physics.CollisionDetection.Grid.GetMeshesInCells*
  nameWithType.vb: Grid.GetMeshesInCells(Vector2())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Engine.Core.Physics.CollisionDetection.Grid.GetMeshesInCells(Vector2())
  name.vb: GetMeshesInCells(Vector2())
- uid: Engine.Core.Physics.CollisionDetection.Grid.Contains(Vector2)
  commentId: M:Engine.Core.Physics.CollisionDetection.Grid.Contains(Vector2)
  id: Contains(Vector2)
  parent: Engine.Core.Physics.CollisionDetection.Grid
  langs:
  - csharp
  - vb
  name: Contains(Vector2)
  nameWithType: Grid.Contains(Vector2)
  fullName: Engine.Core.Physics.CollisionDetection.Grid.Contains(Vector2)
  type: Method
  source:
    id: Contains
    path: ''
    startLine: 6368
  assemblies:
  - cs.temp.dll
  namespace: Engine.Core.Physics.CollisionDetection
  syntax:
    content: public bool Contains(Vector2 index)
    parameters:
    - id: index
      type: Vector2
    return:
      type: System.Boolean
    content.vb: Public Function Contains(index As Vector2) As Boolean
  overload: Engine.Core.Physics.CollisionDetection.Grid.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Engine.Core.Physics.CollisionDetection.Grid.AddMeshToCell(Vector2,Mesh3D)
  commentId: M:Engine.Core.Physics.CollisionDetection.Grid.AddMeshToCell(Vector2,Mesh3D)
  id: AddMeshToCell(Vector2,Mesh3D)
  parent: Engine.Core.Physics.CollisionDetection.Grid
  langs:
  - csharp
  - vb
  name: AddMeshToCell(Vector2, Mesh3D)
  nameWithType: Grid.AddMeshToCell(Vector2, Mesh3D)
  fullName: Engine.Core.Physics.CollisionDetection.Grid.AddMeshToCell(Vector2, Mesh3D)
  type: Method
  source:
    id: AddMeshToCell
    path: ''
    startLine: 6381
  assemblies:
  - cs.temp.dll
  namespace: Engine.Core.Physics.CollisionDetection
  syntax:
    content: public void AddMeshToCell(Vector2 index, Mesh3D mesh)
    parameters:
    - id: index
      type: Vector2
    - id: mesh
      type: Mesh3D
    content.vb: Public Sub AddMeshToCell(index As Vector2, mesh As Mesh3D)
  overload: Engine.Core.Physics.CollisionDetection.Grid.AddMeshToCell*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Engine.Core.Physics.CollisionDetection.Grid.RemoveMeshFromCell(Vector2,Mesh3D)
  commentId: M:Engine.Core.Physics.CollisionDetection.Grid.RemoveMeshFromCell(Vector2,Mesh3D)
  id: RemoveMeshFromCell(Vector2,Mesh3D)
  parent: Engine.Core.Physics.CollisionDetection.Grid
  langs:
  - csharp
  - vb
  name: RemoveMeshFromCell(Vector2, Mesh3D)
  nameWithType: Grid.RemoveMeshFromCell(Vector2, Mesh3D)
  fullName: Engine.Core.Physics.CollisionDetection.Grid.RemoveMeshFromCell(Vector2, Mesh3D)
  type: Method
  source:
    id: RemoveMeshFromCell
    path: ''
    startLine: 6385
  assemblies:
  - cs.temp.dll
  namespace: Engine.Core.Physics.CollisionDetection
  syntax:
    content: public void RemoveMeshFromCell(Vector2 index, Mesh3D mesh)
    parameters:
    - id: index
      type: Vector2
    - id: mesh
      type: Mesh3D
    content.vb: Public Sub RemoveMeshFromCell(index As Vector2, mesh As Mesh3D)
  overload: Engine.Core.Physics.CollisionDetection.Grid.RemoveMeshFromCell*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Engine.Core.Physics.CollisionDetection.Grid.CellContains(Vector2,Mesh3D)
  commentId: M:Engine.Core.Physics.CollisionDetection.Grid.CellContains(Vector2,Mesh3D)
  id: CellContains(Vector2,Mesh3D)
  parent: Engine.Core.Physics.CollisionDetection.Grid
  langs:
  - csharp
  - vb
  name: CellContains(Vector2, Mesh3D)
  nameWithType: Grid.CellContains(Vector2, Mesh3D)
  fullName: Engine.Core.Physics.CollisionDetection.Grid.CellContains(Vector2, Mesh3D)
  type: Method
  source:
    id: CellContains
    path: ''
    startLine: 6389
  assemblies:
  - cs.temp.dll
  namespace: Engine.Core.Physics.CollisionDetection
  syntax:
    content: public bool CellContains(Vector2 index, Mesh3D mesh)
    parameters:
    - id: index
      type: Vector2
    - id: mesh
      type: Mesh3D
    return:
      type: System.Boolean
    content.vb: Public Function CellContains(index As Vector2, mesh As Mesh3D) As Boolean
  overload: Engine.Core.Physics.CollisionDetection.Grid.CellContains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Engine.Core.Physics.CollisionDetection.Grid.RemoveMeshFromAllCells(Mesh3D)
  commentId: M:Engine.Core.Physics.CollisionDetection.Grid.RemoveMeshFromAllCells(Mesh3D)
  id: RemoveMeshFromAllCells(Mesh3D)
  parent: Engine.Core.Physics.CollisionDetection.Grid
  langs:
  - csharp
  - vb
  name: RemoveMeshFromAllCells(Mesh3D)
  nameWithType: Grid.RemoveMeshFromAllCells(Mesh3D)
  fullName: Engine.Core.Physics.CollisionDetection.Grid.RemoveMeshFromAllCells(Mesh3D)
  type: Method
  source:
    id: RemoveMeshFromAllCells
    path: ''
    startLine: 6393
  assemblies:
  - cs.temp.dll
  namespace: Engine.Core.Physics.CollisionDetection
  syntax:
    content: public void RemoveMeshFromAllCells(Mesh3D mesh)
    parameters:
    - id: mesh
      type: Mesh3D
    content.vb: Public Sub RemoveMeshFromAllCells(mesh As Mesh3D)
  overload: Engine.Core.Physics.CollisionDetection.Grid.RemoveMeshFromAllCells*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Engine.Core.Physics.CollisionDetection
  commentId: N:Engine.Core.Physics.CollisionDetection
  name: Engine.Core.Physics.CollisionDetection
  nameWithType: Engine.Core.Physics.CollisionDetection
  fullName: Engine.Core.Physics.CollisionDetection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Engine.Core.Physics.CollisionDetection.Grid.Item*
  commentId: Overload:Engine.Core.Physics.CollisionDetection.Grid.Item
  name: Item
  nameWithType: Grid.Item
  fullName: Engine.Core.Physics.CollisionDetection.Grid.Item
- uid: Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Vector2
- uid: Engine.Core.Physics.CollisionDetection.Cell
  commentId: T:Engine.Core.Physics.CollisionDetection.Cell
  parent: Engine.Core.Physics.CollisionDetection
  name: Cell
  nameWithType: Cell
  fullName: Engine.Core.Physics.CollisionDetection.Cell
- uid: Engine.Core.Physics.CollisionDetection.Grid.#ctor*
  commentId: Overload:Engine.Core.Physics.CollisionDetection.Grid.#ctor
  name: Grid
  nameWithType: Grid.Grid
  fullName: Engine.Core.Physics.CollisionDetection.Grid.Grid
- uid: Engine.Core.Physics.CollisionDetection.Grid.GetCell*
  commentId: Overload:Engine.Core.Physics.CollisionDetection.Grid.GetCell
  name: GetCell
  nameWithType: Grid.GetCell
  fullName: Engine.Core.Physics.CollisionDetection.Grid.GetCell
- uid: Engine.Core.Physics.CollisionDetection.Grid.SetCell*
  commentId: Overload:Engine.Core.Physics.CollisionDetection.Grid.SetCell
  name: SetCell
  nameWithType: Grid.SetCell
  fullName: Engine.Core.Physics.CollisionDetection.Grid.SetCell
- uid: Engine.Core.Physics.CollisionDetection.Grid.GetMeshesInCell*
  commentId: Overload:Engine.Core.Physics.CollisionDetection.Grid.GetMeshesInCell
  name: GetMeshesInCell
  nameWithType: Grid.GetMeshesInCell
  fullName: Engine.Core.Physics.CollisionDetection.Grid.GetMeshesInCell
- uid: System.Collections.Generic.List{Mesh3D}
  commentId: T:System.Collections.Generic.List{Mesh3D}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Mesh3D>
  nameWithType: List<Mesh3D>
  fullName: System.Collections.Generic.List<Mesh3D>
  nameWithType.vb: List(Of Mesh3D)
  fullName.vb: System.Collections.Generic.List(Of Mesh3D)
  name.vb: List(Of Mesh3D)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mesh3D
    name: Mesh3D
    nameWithType: Mesh3D
    fullName: Mesh3D
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mesh3D
    name: Mesh3D
    nameWithType: Mesh3D
    fullName: Mesh3D
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Engine.Core.Physics.CollisionDetection.Grid.GetMeshesInCells*
  commentId: Overload:Engine.Core.Physics.CollisionDetection.Grid.GetMeshesInCells
  name: GetMeshesInCells
  nameWithType: Grid.GetMeshesInCells
  fullName: Engine.Core.Physics.CollisionDetection.Grid.GetMeshesInCells
- uid: Vector2[]
  isExternal: true
  name: Vector2[]
  nameWithType: Vector2[]
  fullName: Vector2[]
  nameWithType.vb: Vector2()
  fullName.vb: Vector2()
  name.vb: Vector2()
  spec.csharp:
  - uid: Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vector2
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vector2
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Engine.Core.Physics.CollisionDetection.Grid.Contains*
  commentId: Overload:Engine.Core.Physics.CollisionDetection.Grid.Contains
  name: Contains
  nameWithType: Grid.Contains
  fullName: Engine.Core.Physics.CollisionDetection.Grid.Contains
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Engine.Core.Physics.CollisionDetection.Grid.AddMeshToCell*
  commentId: Overload:Engine.Core.Physics.CollisionDetection.Grid.AddMeshToCell
  name: AddMeshToCell
  nameWithType: Grid.AddMeshToCell
  fullName: Engine.Core.Physics.CollisionDetection.Grid.AddMeshToCell
- uid: Mesh3D
  isExternal: true
  name: Mesh3D
  nameWithType: Mesh3D
  fullName: Mesh3D
- uid: Engine.Core.Physics.CollisionDetection.Grid.RemoveMeshFromCell*
  commentId: Overload:Engine.Core.Physics.CollisionDetection.Grid.RemoveMeshFromCell
  name: RemoveMeshFromCell
  nameWithType: Grid.RemoveMeshFromCell
  fullName: Engine.Core.Physics.CollisionDetection.Grid.RemoveMeshFromCell
- uid: Engine.Core.Physics.CollisionDetection.Grid.CellContains*
  commentId: Overload:Engine.Core.Physics.CollisionDetection.Grid.CellContains
  name: CellContains
  nameWithType: Grid.CellContains
  fullName: Engine.Core.Physics.CollisionDetection.Grid.CellContains
- uid: Engine.Core.Physics.CollisionDetection.Grid.RemoveMeshFromAllCells*
  commentId: Overload:Engine.Core.Physics.CollisionDetection.Grid.RemoveMeshFromAllCells
  name: RemoveMeshFromAllCells
  nameWithType: Grid.RemoveMeshFromAllCells
  fullName: Engine.Core.Physics.CollisionDetection.Grid.RemoveMeshFromAllCells
